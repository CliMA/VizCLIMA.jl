{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load modules\n",
    "using Plots\n",
    "using NCDatasets\n",
    "using Statistics: mean\n",
    "#;import Pkg; Pkg.add(\"DelimitedFiles\")\n",
    "using DelimitedFiles\n",
    "#;import Pkg; Pkg.add(\"PrettyTables\")\n",
    "using PrettyTables\n",
    "\n",
    "\n",
    "# Useful functions\n",
    "function get_var(file_name, var_name, t_spinup, nan_fill_value);\n",
    "    ds = NCDataset(file_name, \"r\");\n",
    "    lon = ds[\"long\"][:];\n",
    "    lat = ds[\"lat\"][:];\n",
    "    z = ds[\"level\"][:] / 1e3; # height in kilometers\n",
    "    time = ds[\"time\"][:];  # time\n",
    "    var = ds[var_name][:];\n",
    "    data=var[:, :, :, t_spinup:end]; # cut out the spinup;\n",
    "    replace!(data, NaN=>nan_fill_value)\n",
    "    return time, z, lat, lon, data\n",
    "    none\n",
    "end\n",
    "\n",
    "function get_lonslice_vslice(file_name, var_name, t_spinup, lev_i, lon_i,nan_fill_value);\n",
    "    ds = NCDataset(file_name, \"r\");\n",
    "    lon = ds[\"long\"][:];\n",
    "    lat = ds[\"lat\"][:];\n",
    "    z = ds[\"level\"][:] / 1e3; # height in kilometers\n",
    "    time = ds[\"time\"][:];  # time\n",
    "    var = ds[var_name][:];\n",
    "    var=var[:, :, :, t_spinup:end]; # cut out the spinup;\n",
    "    data_time_mean_vslice = (var[lon_i,:,lev_i,:]); # create statistics\n",
    "    replace!(data_time_mean_vslice, NaN=>nan_fill_value)\n",
    "    return lat, time, data_time_mean_vslice\n",
    "    none\n",
    "end\n",
    "\n",
    "function get_min_max(var);\n",
    "    vmax = maximum(filter(!isnan,var))\n",
    "    vmin = minimum(filter(!isnan,var))\n",
    "    return vmin,vmax\n",
    "    none\n",
    "end\n",
    "\n",
    "\n",
    "# Select the variable to plot\n",
    "var_name = \"u\";\n",
    "plot_anomaly = false;\n",
    "nan_fill_value = 0\n",
    "t_spinup = 1\n",
    "level_index=2\n",
    "\n",
    "\n",
    "# Specify needed directories and filenames: these will be replaced automatically by the bash run script or can be modified manually\n",
    "CLIMA_ANALYSIS = \"/central/scratch/elencz/output/hs_bmark_np/analysis/\";\n",
    "CLIMA_NETCDF = \"/central/scratch/elencz/output/hs_bmark_d/netcdf/copies\";\n",
    "CLIMA_LOGFILE = split(CLIMA_ANALYSIS,\"analysis/\")[1]*\"log/experiments_performance\";\n",
    "RUNNAME = \"hs_bmark_d\";\n",
    "\n",
    "\n",
    "# Get all netcdf file names with a specified string in the CLIMA_NETCDF directory\n",
    "fnames = filter(x -> occursin(\"AtmosGCMDefault\", x), readdir( CLIMA_NETCDF ) );\n",
    "\n",
    "# Aggregate data in output into a multi-file dataset\n",
    "nexp = size(fnames)\n",
    "\n",
    "# Customise shorter exp names\n",
    "exp_names = Array{String}(undef, nexp[1]);\n",
    "for i in 1:nexp[1]\n",
    "  driver = fnames[i]\n",
    "  exp_names[i] = \"hres\"*split(driver,\"n_horz_\")[2][1:2] * \"_pord\" * split(driver,\"poly_order_\")[2][1]\n",
    "end\n",
    "\n",
    "# Hovmoller\n",
    "var_name = \"u\"\n",
    "lon_index = 10\n",
    "lat, time, dummy= get_lonslice_vslice( \"$CLIMA_NETCDF/\"fnames[14], var_name, 1, level_index, lon_index, nan_fill_value);\n",
    "clims = ( get_min_max(dummy[:, :]) )\n",
    "\n",
    "plot_array = Any[]; \n",
    "diag_dts=Any[]\n",
    "for i in 1:nexp[1]\n",
    "  lat, time, vs = get_lonslice_vslice( \"$CLIMA_NETCDF/\"fnames[i], var_name, 1, level_index, lon_index, nan_fill_value);\n",
    "  time_r = collect(1:1:size(time)[1]);  \n",
    "  diag_dt_days =  (time[2] - time[1]).value / (1000*60*60*24) \n",
    "  one_plot = contourf( time_r .* diag_dt_days, lat, vs, title = exp_names[i], xlabel=\"time\", ylabel=\"lat (deg N)\", clims = clims);\n",
    "  push!(plot_array,one_plot); # make a plot and add it to the plot_array\n",
    "  push!(diag_dts,diag_dt_days);\n",
    "end\n",
    "\n",
    "fig=plot(plot_array... , layout=(3, 5), size=(3000, 1200) )\n",
    "savefig(fig, string(\"$CLIMA_ANALYSIS/plot_$var_name\",\"_hovmoller_sens.pdf\"));\n",
    "\n",
    "\n",
    "# Animation\n",
    "altitude_index = 7\n",
    "var_array = Any[]; # can type this more strictly\n",
    "t_nos = Any[];\n",
    "time, z, lat, lon, dummy = get_var( \"$CLIMA_NETCDF/\"fnames[1], var_name, t_spinup, nan_fill_value)\n",
    "clims = ( get_min_max(dummy) )\n",
    "for i in 1:nexp[1]\n",
    "  time, z, lat, lon, data = get_var( \"$CLIMA_NETCDF/\"fnames[i], var_name, t_spinup, nan_fill_value);\n",
    "  push!(var_array,data); # make a plot and add it to the plot_array\n",
    "  push!(t_nos,size(time)[1]); # make a plot and add it to the plot_array\n",
    "end\n",
    "max_time_no=maximum(t_nos) # number of timesteps of the longest running experiment\n",
    "\n",
    "anim = @animate for t_i in 2:max_time_no\n",
    "  plot_array = Any[]; # can type this more strictly\n",
    "  for i in 1:nexp[1]\n",
    "    var_array_pad = PaddedView(nan_fill_value, var_array[i], (size(lon)[1], size(lat)[1], size(z)[1], max_time_no) );\n",
    "    vs = var_array_pad[:,:,altitude_index,t_i]\n",
    "    one_plot = contourf( lon, lat, vs', title = exp_names[i], xlabel=\"lon (deg)\", ylabel=\"lat (deg N)\", clims = clims);\n",
    "    push!(plot_array,one_plot); # make a plot and add it to the plot_array\n",
    "  end                        \n",
    "    plot(plot_array..., layout=(3, 5), size=(3000, 1200) ) \n",
    "end\n",
    "mp4(anim, \"lat_lon_sens_test.mp4\", fps = 5) # hide\n",
    "\n",
    "\n",
    "# Kinetic energy\n",
    "var_array = Any[]; # can type this more strictly\n",
    "t_nos = Any[];\n",
    "time, z, lat, lon, dummy = get_var( \"$CLIMA_NETCDF/\"fnames[1], var_name, t_spinup, nan_fill_value)\n",
    "clims = ( get_min_max(dummy) )\n",
    "for i in 1:nexp[1]\n",
    "  time, z, lat, lon, data = get_var( \"$CLIMA_NETCDF/\"fnames[i], var_name, t_spinup, nan_fill_value);\n",
    "  push!(var_array,data); # make a plot and add it to the plot_array\n",
    "  push!(t_nos,size(time)[1]); # make a plot and add it to the plot_array\n",
    "end\n",
    "max_time_no=maximum(t_nos) # number of timesteps of the longest running experiment\n",
    "\n",
    "\n",
    "# Get KE and EKE of all experiments\n",
    "KE_array = Any[]; \n",
    "EKE_array = Any[];\n",
    "rho_array = Any[];\n",
    "t_nos = Any[];\n",
    "for i in 1:nexp[1]\n",
    "  time, z, lat, lon, u = get_var( \"$CLIMA_NETCDF/\"fnames[i], \"u\", t_spinup, nan_fill_value);\n",
    "  time, z, lat, lon, v = get_var( \"$CLIMA_NETCDF/\"fnames[i], \"v\", t_spinup, nan_fill_value);\n",
    "  time, z, lat, lon, rho = get_var( \"$CLIMA_NETCDF/\"fnames[i], \"rho\", t_spinup, nan_fill_value);\n",
    "  KE = 0.5 * (u .^ 2 + v .^ 2)\n",
    "  uPR = u .- mean( u[:,:,:,:]  , dims=1)\n",
    "  vPR = v .- mean( v[:,:,:,:]  , dims=1)\n",
    "  EKE = 0.5 .* (uPR .^ 2 + vPR .^ 2 )\n",
    "  push!(KE_array,KE); \n",
    "  push!(EKE_array,EKE); \n",
    "  push!(rho_array,rho); \n",
    "  push!(t_nos,size(time)[1]); # make a plot and add it to the plot_array\n",
    "end\n",
    "\n",
    "\n",
    "# Individual plots\n",
    "plot_array = Any[];\n",
    "for i in 1:nexp[1]\n",
    "  time_r = collect(1:1:t_nos[i]); \n",
    "  KEr = mean(KE_array[i] .* rho_array[i],dims=(1,2,3))[1,1,1,:]\n",
    "  EKEr = mean(EKE_array[i] .* rho_array[i],dims=(1,2,3))[1,1,1,:]\n",
    "  rhor = mean(rho_array[i],dims=(1,2,3))[1,1,1,:]\n",
    "  one_plot = plot( time_r*diag_dts[i],[ KEr ./ rhor , EKEr ./ rhor ], label = [\"KE\" \"EKE\"], title = exp_names[i], xlims = (0,110) )\n",
    "  push!(plot_array,one_plot );\n",
    "end\n",
    "\n",
    "# Plot and save the array of plots\n",
    "fig=plot(plot_array... ,  layout=(3, 5), size=(3000, 1200) )\n",
    "savefig(fig, string(\"$CLIMA_ANALYSIS/kinetic_energy.pdf\"));\n",
    "\n",
    "\n",
    "# Print performance info\n",
    "fl=readdlm(CLIMA_LOGFILE) # ensure heading don't contain spaces\n",
    "print((fl[1,:]))\n",
    "#pretty_table(fl[2:end,2:end],l[1,2:end])\n",
    "\n",
    "# Make an array for table\n",
    "header = [ \"n_horz\", \"poly_order\", \"compl_days\", \"wall_time(s)\", \"t_hyper\", \"CFL\", \"dt(days)\"]\n",
    "table_data =Array{String}(undef, (nexp[1]+1), size(header)[1]);\n",
    "table_data[1,:] = header\n",
    "for i in 2:nexp[1]+1\n",
    "  driver = fl[i,1]\n",
    "  table_data[i,1] = split(driver,\"n_horz_\")[2][1:2]\n",
    "  table_data[i,2] = split(driver,\"poly_order_\")[2][1:2]\n",
    "  root = split((split(driver,\"heldsuarez_\")[2]),\".jl\")[1]\n",
    "  fname = filter(x -> occursin(root, x), readdir( CLIMA_NETCDF ) );\n",
    "  lat, time, vs = get_lonslice_vslice( \"$CLIMA_NETCDF/\"fname[1], \"u\", 1, level_index, lon_index, nan_fill_value);\n",
    "  diag_dt_days =  (time[2] - time[1]).value / (1000*60*60*24) \n",
    "  table_data[i,3] = string(round( size(time)[1]*diag_dt_days ,digits=2)) # sim days #string(t_nos[i-1]) # no copleted t steps    \n",
    "  table_data[i,4] = string(fl[i,3]) # wall time\n",
    "  table_data[i,5] = split(driver,\"hyperft_\")[2][1:2]\n",
    "  table_data[i,6] = string(fl[i,8]) # CFL\n",
    "  table_data[i,7] = string(round(diag_dt_days,digits=2))\n",
    "end\n",
    "\n",
    "# Make the table\n",
    "pretty_table(table_data[2:end,1:end],table_data[1,1:end])\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.4.2",
   "language": "julia",
   "name": "julia-1.4"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.4.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
